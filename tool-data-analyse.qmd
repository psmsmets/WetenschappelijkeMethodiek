# Python voor data-analyse {#sec-tool-python}

[Python](https://www.python.org) is een veelgebruikte, *high-level general-purpose*, geïnterpreteerde en dynamische programmeertaal. 
 Python is zeer populair in verschillende vakgebieden, gaande van data-analyse tot webontwikkeling. 

Python ondersteunt meerdere programmeerparadigma's, waaronder objectgeoriënteerd, imperatief, functioneel en procedureel programmeren. Het beschikt over een dynamisch typesysteem en automatische geheugenbeheer en heeft een grote, uitgebreide standaardbibliotheek.

Python blinkt uit in **eenvoud** en **leesbaarheid**. De Python syntax maakt het mogelijk om concepten in minder regels code uit te drukken dan talen zoals C, Fortran, Java of Rust.

Python maakt gebruik van *just-in-time (JIT)* compilatie[^1], wat het geschikt maakt voor snelle ontwikkeling, terwijl talen zoals C, Fortran of Rust doorgaans *ahead-of-time (AOT)* compilatie gebruiken voor hogere prestaties in kritieke berekeningen. Deze talen worden gebruikt voor toepassingen waar prestaties en nauwkeurigheid van cruciaal belang zijn.

Vergelijkbare open-source alternatieven voor data-analyse zijn [R](https://www.r-project.org) en [Julia](https://julialang.org). Een bepalende factor in de keuze van de programmeertaal is vaak je opleiding, vakgebied en werkomgeving, maar ook de toepassing.

[^1]: Compileren is het vertalen van high-level code naar concrete low-level instructies die uitvoerbaar zijn voor een computer.

::: {.hidden}
*Dit hoofdstuk integreert het leerplan **Informaticawetenschappen**.*

## Python interpreters

https://replit.com/

Jupyter notebooks

IDE lokaal op je computer.

hub.pietersmets.be
:::


## Python

### Hello world
Een "Hello, World!"-programma is vaak het allereerste programma dat je schrijft wanneer je een nieuwe programmeertaal leert. Het is een simpel maar iconisch stukje code dat niets anders doet dan de tekst "Hello, World!" op het scherm toveren. Het is als een vriendelijke begroeting van de programmeertaal zelf, waarmee je jouw avontuur in programmeren begint.

::: {.Example collapse='false'}
Het begin van elke nieuwe programmeertaal in de Python 3 syntaxis:
```{python}
#| echo: true
#| eval: false

print("Hello, World!")
```
:::

::: {.callout-note title="Oorsprong van \"Hello, World!\""}
De oorsprong van "Hello, World!" gaat terug naar de begintijd van de programmeertaal C. Het werd voor het eerst gebruikt door de ontwikkelaars van C om hun taal te demonstreren. In 1974 dook het op in een intern memorandum van Bell Labs, geschreven door Brian Kernighan, en sindsdien is het een klassiek voorbeeld geworden voor beginners in vrijwel elke programmeertaal.
:::


### Ingebouwde Gegevenstypen (Data Types)
<!-- https://www.w3schools.com/python/python_datatypes.asp -->
In programmeren is gegevenstype (data type) een belangrijk concept.

Variabelen kunnen gegevens van verschillende typen opslaan, en verschillende typen kunnen verschillende dingen doen.

Python heeft de volgende gegevenstypen standaard ingebouwd, ingedeeld in de volgende categorieën:

| Gegevenstype | Code |
|--------------|------|
|Tekst Type | `str` |
|Numerieke Typen | `int`, `float`, `complex` |
|Sequentie Typen | `list`, `tuple`, `range` |
|Mapping Type |	`dict` |
|Verzamelingen Typen | `set`, `frozenset` |
|Booleaans Type | `bool` |
|Binaire Typen | `bytes`, `bytearray`, `memoryview` |
|Geen Type | `NoneType` |
: Ingebouwde gegevenstypen in Python 3. {#tbl-gegevenstypen tbl-colwidths="[40,60]" .hover}

::: {.Example collapse='false'}
Print het gegevenstype van de variabele x:
```{python}
#| echo: true
#| eval: false

x = 5
print(type(x))
```
:::

#### Instellen van het Gegevenstype
In Python wordt het gegevenstype ingesteld wanneer je een waarde toewijst aan een variabele:

| Voorbeeld | Gegevenstype |
|-----------|--------------|
| `x = "Hello, World!"` | `str` |
| `x = 20` | `int` |
| `x = 20.5` | `float` |
| `x = 1j` | `complex` |
| `x = ["apple", "banana", "cherry"]` | `list` |
| `x = ("apple", "banana", "cherry")` | `tuple` |
| `x = range(6)` | `range` |
| `x = {"name" : "John", "age" : 36}` | `dict` |
| `x = {"apple", "banana", "cherry"}` | `set` |
| `x = frozenset({"apple", "banana", "cherry"})` | `frozenset` |
| `x = True` | `bool` |
| `x = b"Hello"` | `bytes` |
| `x = bytearray(5)` | `bytearray` |
| `x = memoryview(bytes(5))` | `memoryview` |
| `x = None` | `NoneType` |
: Impliciet toewijzen van gegevenstypen in Python 3. {#tbl-gegevenstypen-impliciet tbl-colwidths="[60,40]" .hover}

#### Specifiek Gegevenstype Instellen
Als je een specifiek gegevenstype wilt aangeven, kun je de volgende constructor-functies gebruiken:

| Voorbeeld | Gegevenstype |
|-----------|--------------|
| `x = str("Hello, World!")` | `str` |
| `x = int(20)` | `int` |
| `x = float(20.5)` | `float` |
| `x = complex(1j)` | `complex` |
| `x = list(("apple", "banana", "cherry"))` | `list` |
| `x = tuple(("apple", "banana", "cherry"))` | `tuple` |
| `x = range(6)` | `range` |
| `x = dict(name="John", age=36)` | `dict` |
| `x = set(("apple", "banana", "cherry"))` | `set` |
| `x = frozenset(("apple", "banana", "cherry"))` | `frozenset` |
| `x = bool(5)` | `bool` |
| `x = bytes(5)` | `bytes` |
| `x = bytearray(5)` | `bytearray` |
| `x = memoryview(bytes(5))` | `memoryview` |
: Expliciet toewijzen van gegevenstypen in Python 3. {#tbl-gegevenstypen-expliciet tbl-colwidths="[60,40]" .hover}


### Python Operatoren
<!-- https://www.w3schools.com/python/python_operators.asp -->
Operatoren worden gebruikt om bewerkingen uit te voeren op variabelen en waarden.

In het onderstaande voorbeeld gebruiken we de + operator om twee waarden bij elkaar op te tellen:

```{python}
#| echo: true
#| eval: false

print(10 + 5)
```

Python verdeelt de operatoren in de volgende groepen:

* Rekenkundige operatoren
* Toewijzingsoperatoren
* Vergelijkingsoperatoren
* Logische operatoren
* Identiteitsoperatoren
* Lidmaatschapsoperatoren
* Bitwise-operatoren



### `input`/`print`

Oefeningen die je aanleren om vlot te werken met de inbegrepen Python functies `input()` en `print()`.

Deze functies maken invoer via het toetsenbord en uitvoer naar het scherm (afdrukken) mogelijk.

Zonder invoer en uitvoer is interactie dmv een Python programma/script niet mogelijk.

Je kan al deze oefeningen oplossen na het bekijken van de video’s 1 tem 10.

(Aanvulling: voor het oplossen van de laatste oefening uit deze reeks moet je video 12 bekijken)

### Werken met getallen
<!-- https://www.w3schools.com/python/python_operators.asp -->

Oefeningen die je allerlei berekeningen laten uitvoeren.

Natuurlijk gaat dat over de som, het verschil, de vermenigvuldiging en de deling.

Maar ook de machtsverheffing, de geheeltallige deling (floor division) en de restberekening (modulo) komen aan bod.

Je kan al deze oefeningen oplossen na het bekijken van de video’s tem 18.

### `if`/`else`

Oefeningen die het `if`\`else`-statement inoefenen, alvorens (binnen dezelfde reeks) uit te breiden naar het `if`\`elif`\`else`-statement.

Na de `if` of `elif` hoort steeds een bewering (Booleaanse expressie) te staan.

Het bouwen van zinvolle Booleaanse expressies, is (in deze oefeningenreeks) net zo belangrijk als het onder de knie krijgen van de `if`/`elif`/`else`-syntax.

Het opstellen van zinvolle Booleaanse expressies, vereist al snel het gebruik van relationele operatoren, Booleaanse operatoren, ingebouwde functies zoals `abs()`, `max()`, `min()`, `len()`, ...

Geraak je er niet meteen uit, dan heb je misschien één van de nodige onderwerpen nog niet behandeld gezien in de video’s, kijk dan even verder.

Na het maken van deze oeningen zullen de begrippen relationele operator, takenlijst, indentatie en booleaanse waarde geen geheimen meer hebben.

Je kan al deze oefeningen oplossen na het bekijken van de video’s tem 27.

### `while`-lus

Oefeningen die je aanleren om vlot te werken met de eerste van 2 lussen; namelijk de `while`-lus.

Zoals je in de videoreeks leert kan de `while`-lus altijd gebruikt worden. 
Men hoeft op voorhand niet te weten hoe vaak een herhaling zal worden uitgevoerd.

Zoals je zag in de videoreeks, sluit de `while`-lus heel goed aan bij het `if`-statement. 
Beiden starten met een booleaanse expressie!

Regelmatig moeten waarden op het scherm verschijnen, zonder dat die steeds op een nieuwe regel verschijnen. Daarvoor zal je de keyword argumenten sep en end, die horen bij de functie print() moeten gebruiken.

Je kan al deze oefeningen oplossen na het bekijken van de video’s tem 29.

### `for`-lus

Oefeningen die je aanleren om vlot te werken met de eerste van 2 lussen; namelijk de `for`-lus.

Zoals je in de videoreeks leert is de `for`-lus bruikbaar wanneer je op voorhand weet hoe vaak een herhaling zal worden uitgevoerd.

Of wel omdat je het op voorhand vastlegt, ofwel om dat je beschikbare collectie gebruikt.

Je kan al deze oefeningen oplossen na het bekijken van de video’s tem 32.

### Werken met `strings`

Oefeningen die je aanleren om vlot manipulaties te kunnen uitvoeren op waarden van het datatype string.

Slicing, `len()`, ...

Voorlopig zijn er geen video’s beschikbaar die de nodige kennis overbrengen, al zitten ze wel in de pijplijn.

Deze oefeningen kunnen klassiek opgelost worden (zonder het gebruik van string-methodes), al is het vaak makkelijker om wel string-methodes te gebruiken. Leerkrachten kunnen zowel een model-oplossing met en zonder string-methodes terugvinden.

Wil je verder doen met de oefeningen uit deze reeks, schakel dan over naar het boek “De programmeursleerling” van Prof. Spronck. Zijn boek (pdf) is gratis downloadbaar via zijn “[website](http://spronck.net/pythonbook/dutchindex.xhtml)”. Na het doornemen van hoofdstuk 10, ben je in staat om de oefeningen uit deze reeks te maken.

### Werken met `lists`

Oefeningen die je aanleren om vlot manipulaties te kunnen uitvoeren op waarden van het datatype list.

Slicing, `len()`, ...

List methodes zoals `append()`, `extend()`, `pop()`, ...

Voorlopig zijn er geen video’s beschikbaar die de nodige kennis overbrengen.

Wil je verder doen met de oefeningen uit deze reeks, schakel dan over naar het boek “De programmeursleerling” van Prof. Spronck. Zijn boek (pdf) is gratis downloadbaar via zijn “[website](http://spronck.net/pythonbook/dutchindex.xhtml)”. 
Na het doornemen van hoofdstuk 12, ben je in staat om de oefeningen uit deze reeks te maken.

### 2D lijsten

We zien 2D lijsten als een uitbreiding op de gewone lijst.

Een 2D lijst, is een lijst die bestaat uit lijsten.

Een wiskundige matrix, kan makkelijk gemodelleerd worden adhv 2D lijsten.

Voorlopig zijn er geen video’s beschikbaar die de nodige kennis overbrengen.

Wil je verder doen met de oefeningen uit deze reeks, schakel dan over naar het boek “De programmeursleerling” van Prof. Spronck. Zijn boek (pdf) is gratis downloadbaar via zijn “[website](http://spronck.net/pythonbook/dutchindex.xhtml)”. 
Na het doornemen van hoofdstuk 12, ben je in staat om de oefeningen uit deze reeks te maken.

Dit hoofdstuk nam je reeds door voor de oefeningenreeks over lijsten, een 2D lijst is slechts een kleine uitbreiden van de lijst.

### Sets

Deze oefeningen leren je werken met het datatype set.

Voorlopig zijn er geen video’s beschikbaar die de nodige kennis overbrengen.

Wil je verder doen met de oefeningen uit deze reeks, schakel dan over naar het boek “De programmeursleerling” van Prof. Spronck. Zijn boek (pdf) is gratis downloadbaar via zijn “[website](http://spronck.net/pythonbook/dutchindex.xhtml)”. 
Na het doornemen van hoofdstuk 14, ben je in staat om de oefeningen uit deze reeks te maken.

### Dictionaries

Je leert werken met waarden van het datatype dictionary (dict).

Voorlopig zijn er geen video’s beschikbaar die de nodige kennis overbrengen.

Wil je verder doen met de oefeningen uit deze reeks, schakel dan over naar het boek “De programmeursleerling” van Prof. Spronck. Zijn boek (pdf) is gratis downloadbaar via zijn “[website](http://spronck.net/pythonbook/dutchindex.xhtml)”. 
Na het doornemen van hoofdstuk 13, ben je in staat om de oefeningen uit deze reeks te maken.

### Verder oefenen

...

<!-- https://www.w3resource.com/python-exercises/ -->


## Meer lezen

http://www.spronck.net/pythonbook/dutchindex.xhtml


Python3 boek van Pieter Spronck.

Nederlands:
De Programmeursleerling, Leren coderen met Python 3

Engelstalig:
The Coder’s Apprentice, Learning Programming with Python 3

## Alternatieve programmeertalen voor data-analyse
Naast [Python](https://www.python.org) kan je gerust ook een andere programmeertaal gebruiken, zoals bijvoorbeeld [Julia](https://julialang.org) of [R](https://www.r-project.org). Een bepalende factor is vaak je opleiding, vakgebied en werkomgeving maar ook de toepassing.

Handleidingen voor praktisch programmeren:

* [Julia language: a concise tutorial](https://syl1.gitbook.io/julia-language-a-concise-tutorial/)
* [Python for Data Analysis](https://wesmckinney.com/book/)
* [R for Data Science](https://r4ds.hadley.nz)
